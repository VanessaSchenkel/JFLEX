// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexical.jflex

/* USER CODE */
import java.util.*;
import java.io.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexicalAnalyzer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\1\1\3\2\22\0\1\3\1\4\1\5\1\6"+
    "\2\0\1\7\1\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\12\20\1\0\1\21\1\22\1\23"+
    "\1\24\2\0\32\25\1\26\1\27\1\30\3\0\15\25"+
    "\1\31\5\25\1\32\6\25\1\33\1\34\1\35\7\0"+
    "\1\2\u01a2\0\2\2\326\0\u0100\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\3\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\2\10\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\3\1\20\1\16\1\21\1\1\1\22"+
    "\1\3\1\14\2\0\1\23\1\7\1\24\1\25\2\0"+
    "\1\26\1\3\1\27\1\30\2\0\1\26";

  private static int [] zzUnpackAction() {
    int [] result = new int[44];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\36\0\36\0\74\0\132\0\170\0\226\0\264"+
    "\0\36\0\36\0\322\0\360\0\36\0\u010e\0\u012c\0\u014a"+
    "\0\36\0\132\0\132\0\u0168\0\36\0\u0186\0\36\0\u01a4"+
    "\0\36\0\u01c2\0\36\0\u01e0\0\36\0\u01fe\0\u021c\0\36"+
    "\0\36\0\36\0\36\0\u023a\0\u0258\0\u0276\0\36\0\u01fe"+
    "\0\u021c\0\u0294\0\u02b2\0\u02d0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[44];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\2\1\17\1\20"+
    "\1\21\1\22\1\23\1\22\1\24\1\25\1\26\1\27"+
    "\1\24\1\30\1\31\1\32\1\33\41\0\1\34\23\0"+
    "\1\26\2\0\1\34\26\0\1\35\12\0\1\36\1\0"+
    "\34\36\1\37\2\0\33\37\7\0\1\40\36\0\1\41"+
    "\40\0\1\42\37\0\1\43\32\0\1\44\4\0\1\45"+
    "\34\0\1\46\1\0\1\20\35\0\1\24\4\0\1\24"+
    "\3\0\2\24\6\0\1\34\23\0\1\34\1\0\1\47"+
    "\1\34\6\0\1\34\14\0\1\24\4\0\1\24\1\0"+
    "\1\34\1\0\1\24\1\30\37\0\1\40\4\0\1\34"+
    "\23\0\1\34\2\0\1\34\3\0\1\36\1\0\3\36"+
    "\1\50\30\36\1\37\2\0\21\37\1\51\11\37\12\44"+
    "\1\52\23\44\1\53\2\0\33\53\16\0\1\46\1\0"+
    "\1\54\15\0\12\44\1\52\4\44\1\47\16\44\1\53"+
    "\1\47\1\0\33\53\20\0\1\54\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[750];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\5\1\2\11\2\1\1\11\3\1\1\11"+
    "\3\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\2\0\4\11\2\0\1\1\1\11\2\1"+
    "\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[44];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  boolean isDeclaration = false; 
  boolean newSubcope = false; 
  boolean isThereSubscope = false; 

  int varCount = 0;
  int scopeCount = 0;
  int braceCounter = 0;
  int braceCounterSubscope = 0;

  public class Subscope {
    public boolean isClosed; 

    public boolean getIsClosed(){
      return this.isClosed;
    }

    public void setIsClosed(boolean isClosed){
      this.isClosed = isClosed;
    }
  }

  public class Scope {
    ArrayList<Subscope> subscope = new ArrayList<Subscope>();
    public boolean isClosed;
    public boolean isLibrary;
    public int subscopeCount;

    public Subscope getSubscope(int i){
      return this.subscope.get(i);
    }

    public void setSubscope(int i, boolean value){
      Subscope subscope = new Subscope();
      subscope.setIsClosed(value);
      this.subscope.add(i, subscope);
    }

    public boolean getIsClosed(){
      return this.isClosed;
    }

    public void setIsClosed(boolean isClosed){
      this.isClosed = isClosed;
    }

    public boolean getIsLibrary(){
      return this.isLibrary;
    }

    public void setIsLibrary(boolean isLibrary){
      this.isLibrary = isLibrary;
    }

    public int getSubscopeCount(){
      return this.subscopeCount;
    }
    
    public void setSubscopeCount(int subscopeCount){
      this.subscopeCount = subscopeCount;
    }
  }

  class Variables {
    String value;
    public int scope;
    public int subscope;

    public String getValue(){
      return this.value;
    }

    public void setValue(String value){
      this.value = value;
    }

    public int getScope(){
      return this.scope;
    }

    public void setScope(int scope){
      this.scope = scope;
    }

    public int getSubscope(){
      return this.subscope;
    }

    public void setSubscope(int subscope){
      this.subscope = subscope;
    }

}

  ArrayList<Scope> scopes = new ArrayList<Scope>();
  ArrayList<Variables> dictionary = new  ArrayList<Variables>();

  public void checkScope(){
	if(braceCounter == 0){
		//closing the current scope
		scopes.get(scopeCount).setIsClosed(true);
	}
	else if(braceCounterSubscope == braceCounter){
		//closing the current subscope
		int subscopeID = scopes.get(scopeCount).getSubscopeCount();
		scopes.get(scopeCount).getSubscope(subscopeID).setIsClosed(true);	
		isThereSubscope = false;
	}
}

public void checkPointer(){
	boolean isPointer = yytext().equals("*(");

	if(isPointer) {//it'is a pointer and a L_paren
		System.out.println("[Pointer, *]");
		System.out.println("[L_Paren, (]");
		return;
	}
	
	if(isDeclaration){ //so it's a pointer
		System.out.printf("[Pointer, %s]\n", yytext());
		isDeclaration = false;
		return;
	}
	
	//else it's a arith op
	System.out.printf("[Arith_Op: %s]\n", yytext());
}

int createId(){	
  Variables variable = new Variables();
  variable.setValue(yytext());

	if(scopes.get(scopeCount).getIsClosed()){
		//Add new method in the scope 0
    variable.setScope(0);
    variable.setSubscope(0);
    dictionary.add(varCount, variable);	
		++varCount;	
		
		//Create new scope
		++scopeCount;
    Scope scopeLocal = new Scope();
    scopeLocal.setIsClosed(false);
    scopeLocal.setIsLibrary(false);
    scopeLocal.setSubscopeCount(0);
    scopeLocal.setSubscope(0, false);

    scopes.add(scopeCount, scopeLocal);
		return varCount-1;
	}

	//create the new ID
  variable.setScope(scopeCount);
  variable.setSubscope(scopes.get(scopeCount).getSubscopeCount());
    
	dictionary.add(varCount, variable);	
	++varCount;	

	return varCount-1;
}

int checkID(){	
	if(isDeclaration && newSubcope){
		return createSubscope();
	}
	
  boolean isMain = yytext().equals("main"); 
  if(isMain){
		//scope 0 is closed
		scopes.get(0).setIsClosed(false);
		scopes.get(0).setIsLibrary(true);
		
		++scopeCount;
    Scope scope = new Scope();
    scope.setIsClosed(false);
    scope.setIsLibrary(false);
    scope.setSubscopeCount(0);
    scope.setSubscope(0, false);

    scopes.add(scopeCount, scope);

		return 0;
	}
	
	for(int i = varCount-1; i>=0; i--){
    boolean isEqual = yytext().equals(dictionary.get(i).getValue()); 
    
    if(isEqual) {
			int scopeID = dictionary.get(i).getScope();
			int subscopeID = dictionary.get(i).getSubscope();

			//the scope needs to be open or to be a library
			if(!scopes.get(scopeID).getIsClosed() || scopes.get(scopeID).getIsLibrary()){
			    if(subscopeID > 0){
					    //subscope needs to be open
			        if(!scopes.get(scopeID).getSubscope(subscopeID).getIsClosed()){
            			return i;
			        }
			    } else return i;
			}		
		}
	}
	return createId();
}


int createSubscope(){	
	braceCounterSubscope = braceCounter;
	scopes.get(scopeCount).setSubscopeCount(1);
  scopes.get(scopeCount).setSubscope(1, false);
	isThereSubscope = true;
	
  Variables variable = new Variables();
  variable.setValue(yytext());
  variable.setScope(scopeCount);
  variable.setSubscope(scopes.get(scopeCount).getSubscopeCount());
  dictionary.add(varCount, variable);

	++varCount;	
	return varCount-1;
}

void scopeInclude(){
	if(scopeCount == 0) {	
		//Scope methods creation
    Scope scopeLocal = new Scope();
    scopeLocal.setIsClosed(false);
    scopeLocal.setIsLibrary(false);
    scopeLocal.setSubscopeCount(0);
    scopeLocal.setSubscope(0, false);

    scopes.add(scopeCount, scopeLocal);

		System.out.println("Scope methods has been added");
		
    Variables variableLocal = new Variables();
    variableLocal.setScope(scopeCount);
    variableLocal.setSubscope(scopes.get(scopeCount).getSubscopeCount());
    variableLocal.setValue("main");

    dictionary.add(varCount, variableLocal);
    
		//ID main is created
		System.out.println("[ID " + varCount + ", Scope " +  dictionary.get(varCount).getScope() + ", Subscope " +  dictionary.get(varCount).getSubscope() + ",\"main\"]");
		++varCount;	
		++scopeCount;
	}

  boolean isStdioLib = yytext().equals("#include <stdio.h>");
	if(isStdioLib) {//It's equal
		
    //Scope stdio library creation
		System.out.printf("<stdio.h> library will be imported\n");

    Scope scopeLocal = new Scope();
    scopeLocal.setIsClosed(false);
    scopeLocal.setIsLibrary(false);
    scopeLocal.setSubscopeCount(0);

    scopes.add(scopeCount, scopeLocal);

		System.out.printf("<stdio.h> library scope has been added\n");
		
    Variables variableLocal = new Variables();
    variableLocal.setScope(scopeCount);
    variableLocal.setSubscope(scopes.get(scopeCount).getSubscopeCount());
    variableLocal.setValue("printf");

    dictionary.add(varCount, variableLocal);
		
    //ID printf is created
		System.out.println("[ID " + varCount + ", Scope " +  dictionary.get(varCount).getScope() + ", Subscope " +  dictionary.get(varCount).getSubscope() + ", \"printf\"] ");

		++varCount;	

    variableLocal.setScope(scopeCount);
    variableLocal.setSubscope(scopes.get(scopeCount).getSubscopeCount());
    variableLocal.setValue("scanf");

    dictionary.add(varCount, variableLocal);

		//ID scanf is created
    System.out.println("[ID " + varCount + ", Scope " +  dictionary.get(varCount).getScope() + ", Subscope " +  dictionary.get(varCount).getSubscope() + ", \"scanf\"] ");
		++varCount;	
		++scopeCount;
		System.out.println("<stdio.h> library scope has been imported");
	}

	
  boolean isConioLib = yytext().equals("#include <conio.h>");
	if(isConioLib) {//It's equal
		
    //Scope conio library creation
		System.out.println("<conio.h> library will be imported");
    
    Scope scopeLocal = new Scope();
    scopeLocal.setIsClosed(true);
    scopeLocal.setIsLibrary(true);
    scopeLocal.setSubscopeCount(0);
    scopeLocal.setSubscope(0, true);

    scopes.add(scopeCount, scopeLocal);
		
    System.out.println("<conio.h> library scope has been added");

    Variables variableLocal = new Variables();
    variableLocal.setScope(scopeCount);
    variableLocal.setSubscope(scopes.get(scopeCount).getSubscopeCount());
    variableLocal.setValue("clrscr");
    
    dictionary.add(varCount, variableLocal);
		
    //ID clrscr is created
    System.out.println("[ID " + varCount + ", Scope " +  dictionary.get(varCount).getScope() + ", Subscope " +  dictionary.get(varCount).getSubscope() + ", \"clrscr\"] ");
		++varCount;	
		
    variableLocal.setScope(scopeCount);
    variableLocal.setSubscope(scopes.get(scopeCount).getSubscopeCount());
    variableLocal.setValue("getch");
    
    dictionary.add(varCount, variableLocal);
		
    //ID getch is created
    System.out.println("[ID " + varCount + ", Scope " +  dictionary.get(varCount).getScope() + ", Subscope " +  dictionary.get(varCount).getSubscope() + ", \"getch\"] ");
    
		++varCount;	
		System.out.println("<conio.h> library scope has been imported");
	}
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.printf("NOT RECOGNIZED: \n" + "<" + yytext()+">");
            }
            // fall through
          case 25: break;
          case 2:
            { System.out.print(yytext());
            }
            // fall through
          case 26: break;
          case 3:
            { 
            }
            // fall through
          case 27: break;
          case 4:
            { System.out.println("[Address, &]");
            }
            // fall through
          case 28: break;
          case 5:
            { System.out.println("[L_Paren, (]");
            }
            // fall through
          case 29: break;
          case 6:
            { System.out.println("[R_Paren, )]");
            }
            // fall through
          case 30: break;
          case 7:
            { checkPointer();
            }
            // fall through
          case 31: break;
          case 8:
            { System.out.printf("[Arith_Op: %s]\n", yytext());
            }
            // fall through
          case 32: break;
          case 9:
            { System.out.println("[Comma, ,]");
            }
            // fall through
          case 33: break;
          case 10:
            { System.out.printf("[Digit, %d]\n", Integer.parseInt(yytext()));
            }
            // fall through
          case 34: break;
          case 11:
            { System.out.println("[Semicolon, ;]");
            }
            // fall through
          case 35: break;
          case 12:
            { System.out.printf("[Relational_Op, %s]\n", yytext());
            }
            // fall through
          case 36: break;
          case 13:
            { System.out.println("[Equal, =]");
            }
            // fall through
          case 37: break;
          case 14:
            { int id = checkID();
  newSubcope = false;
	isDeclaration = false;
  System.out.println("[ID " + id + ", Scope " +  dictionary.get(id).getScope() + ", Subscope " +  dictionary.get(id).getSubscope() + ", "+ yytext() + "]");
            }
            // fall through
          case 38: break;
          case 15:
            { System.out.println("[L_Bracket, []");
            }
            // fall through
          case 39: break;
          case 16:
            { System.out.println("[R_Bracket, ]]");
            }
            // fall through
          case 40: break;
          case 17:
            { ++braceCounter;
	System.out.println("[L_Brace, {]");
            }
            // fall through
          case 41: break;
          case 18:
            { --braceCounter;
	checkScope();
	System.out.println("[R_Brace, }]");
            }
            // fall through
          case 42: break;
          case 19:
            { System.out.printf("[Logic_Op, %s]\n", yytext());
            }
            // fall through
          case 43: break;
          case 20:
            { System.out.println("[Inc_Op, ++]");
            }
            // fall through
          case 44: break;
          case 21:
            { System.out.println("[Dec_Op, --]");
            }
            // fall through
          case 45: break;
          case 22:
            { System.out.printf("[Float, %.1f]\n", Float.parseFloat(yytext()));
            }
            // fall through
          case 46: break;
          case 23:
            { System.out.printf("[String_literal, %s]\n", yytext());
            }
            // fall through
          case 47: break;
          case 24:
            { scopeInclude();
            }
            // fall through
          case 48: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexicalAnalyzer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexicalAnalyzer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexicalAnalyzer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
